[tox]
requires =
    setuptools>=65.3
    tox>=4.6.3
env_list =
    py
    py-devel
    lint
    pkg
    hook
    docs
    schemas
    pre
    eco
skip_missing_interpreters = true

[testenv]
description =
    Run the tests under {basepython} and
    devel: ansible devel branch
    pre: Enables --pre when installing dependencies, testing prereleases
package = editable
deps =
    devel: ansible-compat @ git+https://github.com/ansible/ansible-compat.git  # GPLv3+
    devel: ansible-core @ git+https://github.com/ansible/ansible.git  # GPLv3+
extras =
    test
pass_env =
    CI
    CURL_CA_BUNDLE
    FORCE_COLOR
    HOME
    LANG
    LC_*
    NO_COLOR
    PYTEST_*
    PYTEST_REQPASS
    PYTHON*
    PYTHONBREAKPOINT
    PYTHONIOENCODING
    PYTHONPYCACHEPREFIX
    PY_COLORS
    REQUESTS_CA_BUNDLE
    RTD_TOKEN
    SETUPTOOLS_SCM_DEBUG
    SSH_AUTH_SOCK
    SSL_CERT_FILE
set_env =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
    COVERAGE_PROCESS_START = {toxinidir}/pyproject.toml
    FORCE_COLOR = 1
    PIP_CONSTRAINT = {toxinidir}/.config/requirements.txt
    PIP_DISABLE_PIP_VERSION_CHECK = 1
    PRE_COMMIT_COLOR = always
    devel, lint, pkg, pre, py39: PIP_CONSTRAINT = /dev/null
    devel: ANSIBLE_DEVEL_WARNING = false
    pre: PIP_PRE = 1
commands_pre =
    sh -c "rm -f .tox/.coverage.* 2>/dev/null || true"
    bash ./tools/install-reqs.sh
commands =
    ansible --version
    {envpython} -m pip check
    coverage run -m pytest {posargs: \
      -n auto \
      -ra \
      --showlocals \
      --doctest-modules \
      --durations=10 \
      }
    sh -c "coverage combine -a -q --data-file=.coverage .tox/.coverage.*"
allowlist_externals =
    ./tools/test-hook.sh
    bash
    find
    git
    pwd
    rm
    sh
    tox
    {toxworkdir}/.pipx/bin/ansible-lint

[testenv:lint]
description = Run all linters
base_python = python3.10
skip_install = true
deps =
    pre-commit>=2.6
    pytest>=7.2.2  # to updated schemas
    setuptools>=51.1.1
pass_env =
    {[testenv]passenv}
    PRE_COMMIT_HOME
commands_pre =
commands =
    {envpython} -m pre_commit run --all-files --show-diff-on-failure {posargs:}

[testenv:pkg]
description =
    Build package, verify metadata, install package and assert behavior when ansible is missing.
skip_install = true
deps =
    build>=0.9
    pipx
    twine>=4.0.1
commands_pre =
commands =
    bash -c "PIPX_BIN_DIR={toxworkdir}/.pipx/bin PIPX_HOME={toxworkdir}/.pipx pipx install --force -e ."
    bash -c "if stderr=$({toxworkdir}/.pipx/bin/ansible-lint --version >/dev/null) && test -z \"$stderr\"; then echo "ok"; fi"
    {envpython} -c 'import os.path, shutil, sys; \
      dist_dir = os.path.join("{toxinidir}", "dist"); \
      os.path.isdir(dist_dir) or sys.exit(0); \
      print("Removing \{!s\} contents...".format(dist_dir), file=sys.stderr); \
      shutil.rmtree(dist_dir)'
    {envpython} -m build --outdir {toxinidir}/dist/ {toxinidir}
    python3 -m twine check --strict {toxinidir}/dist/*
    sh -c 'python3 -m pip install "ansible-lint @ file://$(echo {toxinidir}/dist/*.whl)"'
    python3 -m pip uninstall -y ansible-lint

[testenv:hook]
description = Validate pre-commit hook definition
deps =
    pre-commit
set_env =
    PIP_CONSTRAINT = /dev/null
commands =
    ./tools/test-hook.sh

[testenv:docs]
description = Builds docs
package = editable
skip_install = false
extras =
    docs
set_env =
    NO_COLOR = 1
    TERM = dump
commands =
    mkdocs {posargs:build --strict --site-dir=_readthedocs/html/}

[testenv:schemas]
description = Rebuild and test JSON Schemas
skip_install = true
deps =
    check-jsonschema>=0.26.3
set_env =
    PIP_CONSTRAINT = /dev/null
change_dir = test/schemas
commands_pre =
    npm install
commands =
    npm test
allowlist_externals =
    npm

[testenv:eco]
description = Perform ecosystem impact (downstream testing) https://github.com/ansible/ansible-lint/discussions/1403
deps =
    {[testenv]deps}
extras =
    test
set_env =
    PYTEST_REQPASS = 7
commands =
    sh -c tools/test-eco.sh
allowlist_externals =
    {[testenv]allowlist_externals}

[testenv:deps]
description = Bump all test dependencies
base_python = python3.10
skip_install = true
deps =
    {[testenv:lint]deps}
set_env =
    PIP_CONSTRAINT = /dev/null
commands_pre =
commands =
    -pre-commit run --all-files --show-diff-on-failure --hook-stage manual lock
    -pre-commit run --all-files --show-diff-on-failure --hook-stage manual up
    -pre-commit autoupdate
    -sh -c "cd test/schemas && npm run deps"
    git diff --exit-code
env_dir = {toxworkdir}/lint

[testenv:redirects]
description = Update documentation redirections for readthedocs
deps =
    readthedocs-cli
commands =
    rtd projects ansible-lint redirects sync -f docs/redirects.yml --wet-run

[testenv:clean]
description = Remove temporary files
skip_install = true
deps =
commands =
    find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -name coverage.xml -name .coverage
    rm -rf .mypy_cache

[testenv:coverage]
description = Combines and displays coverage results
skip_install = true
deps =
    coverage[toml]>=7.0.5
set_env =
    COVERAGE_PROCESS_START = {toxinidir}/pyproject.toml
commands_pre =
commands =
    python3 -m coverage --version
    python3 -m coverage xml --fail-under=0
    python3 -m coverage report
